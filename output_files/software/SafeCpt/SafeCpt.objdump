
SafeCpt.elf:     file format elf32-littlenios2
SafeCpt.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00001578 memsz 0x00001578 flags r-x
    LOAD off    0x00002598 vaddr 0x00009598 paddr 0x0000986c align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00002b40 vaddr 0x00009b40 paddr 0x00009b40 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  0000286c  2**0
                  CONTENTS
  2 .text         0000154c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000002c  0000956c  0000956c  0000256c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d4  00009598  0000986c  00002598  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00009b40  00009b40  00002b40  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  00009b50  00009b50  0000286c  2**0
                  CONTENTS
  7 .comment      00000039  00000000  00000000  0000286c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000470  00000000  00000000  000028a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00004b23  00000000  00000000  00002d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001c0c  00000000  00000000  0000783b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000021d1  00000000  00000000  00009447  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000840  00000000  00000000  0000b618  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00005635  00000000  00000000  0000be58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006d9  00000000  00000000  0001148d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00011b68  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000030  00000000  00000000  00011ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001335  00000000  00000000  00011bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000145e3  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000145e6  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000145eb  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000145ec  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000145ed  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000145f1  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000145f5  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000145f9  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00014602  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0001460b  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  00014614  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000034  00000000  00000000  0001461c  2**0
                  CONTENTS, READONLY
 30 .jdi          0000399f  00000000  00000000  00014650  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00037dc8  00000000  00000000  00017fef  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
0000956c l    d  .rodata	00000000 .rodata
00009598 l    d  .rwdata	00000000 .rwdata
00009b40 l    d  .bss	00000000 .bss
00009b50 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 ../SafeCpt_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
000080ac l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00008238 l     F .text	00000038 alt_dev_reg
00009598 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00008664 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000087a0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000087cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00008990 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00008ae8 l     F .text	00000050 alt_get_errno
00008b38 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
0000976c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 lib2-divmod.c
000093fc l     F .text	00000070 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00008190 g     F .text	00000078 alt_main
0000986c g       *ABS*	00000000 __flash_rwdata_start
00008e08 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00009b4c g     O .bss	00000004 errno
00009b44 g     O .bss	00000004 alt_argv
0001184c g       *ABS*	00000000 _gp
00008208 g     F .text	00000030 usleep
000095ec g     O .rwdata	00000180 alt_fd_list
00008e28 g     F .text	00000090 alt_find_dev
00008a70 g     F .text	00000078 alt_io_redirect
0000956c g       *ABS*	00000000 __DTOR_END__
00008398 g     F .text	000000e4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00009500 g     F .text	00000008 .hidden __udivsi3
0000985c g     O .rwdata	00000004 alt_max_fd
00009864 g     O .rwdata	00000004 _global_impure_ptr
00009b50 g       *ABS*	00000000 __bss_end
000095c4 g     O .rwdata	00000028 alt_dev_null
00008784 g     F .text	0000001c alt_dcache_flush_all
0000986c g       *ABS*	00000000 __ram_rwdata_end
00009854 g     O .rwdata	00000008 alt_dev_list
00009598 g       *ABS*	00000000 __ram_rodata_end
00009508 g     F .text	00000008 .hidden __umodsi3
00009b50 g       *ABS*	00000000 end
0000956c g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000847c g     F .text	00000094 altera_avalon_jtag_uart_write
00009264 g     F .text	00000198 __call_exitprocs
00008020 g     F .text	0000003c _start
000082a4 g     F .text	00000034 alt_sys_init
00009120 g     F .text	00000144 __register_exitproc
00009510 g     F .text	00000028 .hidden __mulsi3
00009598 g       *ABS*	00000000 __ram_rwdata_start
0000956c g       *ABS*	00000000 __ram_rodata_start
000082d8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00008fcc g     F .text	000000d4 alt_get_fd
00008510 g     F .text	00000154 alt_busy_sleep
000090d4 g     F .text	00000030 memcmp
00009b50 g       *ABS*	00000000 __alt_stack_base
00008eb8 g     F .text	00000114 alt_find_file
0000881c g     F .text	000000a0 alt_dev_llist_insert
00009b40 g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000050 main
00008000 g       *ABS*	00000000 __alt_mem_RAM
00009b48 g     O .bss	00000004 alt_envp
00008338 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009860 g     O .rwdata	00000004 alt_errno
0000946c g     F .text	00000048 .hidden __divsi3
0000956c g       *ABS*	00000000 __CTOR_END__
0000956c g       *ABS*	00000000 __flash_rodata_start
0000956c g       *ABS*	00000000 __DTOR_LIST__
00008270 g     F .text	00000034 alt_irq_init
00008d88 g     F .text	00000080 alt_release_fd
000090a0 g     F .text	00000014 atexit
00009868 g     O .rwdata	00000004 _impure_ptr
00009b40 g     O .bss	00000004 alt_argc
00008918 g     F .text	0000005c _do_dtors
0000984c g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000986c g       *ABS*	00000000 _edata
00009b50 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
000090b4 g     F .text	00000020 exit
000094b4 g     F .text	0000004c .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00009538 g     F .text	00000034 _exit
00009104 g     F .text	0000001c strlen
00008c2c g     F .text	0000015c open
00008974 g     F .text	0000001c alt_icache_flush_all
000088bc g     F .text	0000005c _do_ctors
000086b4 g     F .text	000000d0 close
00008110 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6861314 	ori	gp,gp,6220
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a6d014 	ori	r2,r2,39744

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e6d414 	ori	r3,r3,39760

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff67f8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00081100 	call	8110 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00081900 	call	8190 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff680c>

0000805c <main>:

#include "../inc/sopc.h"
#include <unistd.h>

int main(void)
{
    805c:	defffb04 	addi	sp,sp,-20
    8060:	dcc00315 	stw	r19,12(sp)
    8064:	dc800215 	stw	r18,8(sp)
    8068:	dc400115 	stw	r17,4(sp)
    806c:	dc000015 	stw	r16,0(sp)
    8070:	dfc00415 	stw	ra,16(sp)
	int i;
	
	while(1)
	{
		for(i = 0; i < 4; i++)
    8074:	0021883a 	mov	r16,zero
		{
			LED->DATA = 1 << i;
    8078:	04400074 	movhi	r17,1
    807c:	8c440404 	addi	r17,r17,4112
    8080:	04800044 	movi	r18,1
{
	int i;
	
	while(1)
	{
		for(i = 0; i < 4; i++)
    8084:	04c000c4 	movi	r19,3
		{
			LED->DATA = 1 << i;
    8088:	9404983a 	sll	r2,r18,r16
			usleep(100000);
    808c:	010000b4 	movhi	r4,2
    8090:	2121a804 	addi	r4,r4,-31072
{
	int i;
	
	while(1)
	{
		for(i = 0; i < 4; i++)
    8094:	84000044 	addi	r16,r16,1
		{
			LED->DATA = 1 << i;
    8098:	88800015 	stw	r2,0(r17)
			usleep(100000);
    809c:	00082080 	call	8208 <usleep>
{
	int i;
	
	while(1)
	{
		for(i = 0; i < 4; i++)
    80a0:	9c3ff90e 	bge	r19,r16,8088 <_gp+0xffff683c>
    80a4:	0021883a 	mov	r16,zero
    80a8:	003ff706 	br	8088 <_gp+0xffff683c>

000080ac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    80ac:	defffc04 	addi	sp,sp,-16
    80b0:	df000315 	stw	fp,12(sp)
    80b4:	df000304 	addi	fp,sp,12
    80b8:	e13ffd15 	stw	r4,-12(fp)
    80bc:	e17ffe15 	stw	r5,-8(fp)
    80c0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    80c4:	e0fffe17 	ldw	r3,-8(fp)
    80c8:	e0bffd17 	ldw	r2,-12(fp)
    80cc:	18800c26 	beq	r3,r2,8100 <alt_load_section+0x54>
  {
    while( to != end )
    80d0:	00000806 	br	80f4 <alt_load_section+0x48>
    {
      *to++ = *from++;
    80d4:	e0bffe17 	ldw	r2,-8(fp)
    80d8:	10c00104 	addi	r3,r2,4
    80dc:	e0fffe15 	stw	r3,-8(fp)
    80e0:	e0fffd17 	ldw	r3,-12(fp)
    80e4:	19000104 	addi	r4,r3,4
    80e8:	e13ffd15 	stw	r4,-12(fp)
    80ec:	18c00017 	ldw	r3,0(r3)
    80f0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    80f4:	e0fffe17 	ldw	r3,-8(fp)
    80f8:	e0bfff17 	ldw	r2,-4(fp)
    80fc:	18bff51e 	bne	r3,r2,80d4 <_gp+0xffff6888>
    {
      *to++ = *from++;
    }
  }
}
    8100:	e037883a 	mov	sp,fp
    8104:	df000017 	ldw	fp,0(sp)
    8108:	dec00104 	addi	sp,sp,4
    810c:	f800283a 	ret

00008110 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8110:	defffe04 	addi	sp,sp,-8
    8114:	dfc00115 	stw	ra,4(sp)
    8118:	df000015 	stw	fp,0(sp)
    811c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8120:	01000074 	movhi	r4,1
    8124:	21261b04 	addi	r4,r4,-26516
    8128:	01400074 	movhi	r5,1
    812c:	29656604 	addi	r5,r5,-27240
    8130:	01800074 	movhi	r6,1
    8134:	31a61b04 	addi	r6,r6,-26516
    8138:	00080ac0 	call	80ac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    813c:	01000074 	movhi	r4,1
    8140:	21200804 	addi	r4,r4,-32736
    8144:	01400074 	movhi	r5,1
    8148:	29600804 	addi	r5,r5,-32736
    814c:	01800074 	movhi	r6,1
    8150:	31a00804 	addi	r6,r6,-32736
    8154:	00080ac0 	call	80ac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8158:	01000074 	movhi	r4,1
    815c:	21255b04 	addi	r4,r4,-27284
    8160:	01400074 	movhi	r5,1
    8164:	29655b04 	addi	r5,r5,-27284
    8168:	01800074 	movhi	r6,1
    816c:	31a56604 	addi	r6,r6,-27240
    8170:	00080ac0 	call	80ac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8174:	00087840 	call	8784 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8178:	00089740 	call	8974 <alt_icache_flush_all>
}
    817c:	e037883a 	mov	sp,fp
    8180:	dfc00117 	ldw	ra,4(sp)
    8184:	df000017 	ldw	fp,0(sp)
    8188:	dec00204 	addi	sp,sp,8
    818c:	f800283a 	ret

00008190 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8190:	defffd04 	addi	sp,sp,-12
    8194:	dfc00215 	stw	ra,8(sp)
    8198:	df000115 	stw	fp,4(sp)
    819c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    81a0:	0009883a 	mov	r4,zero
    81a4:	00082700 	call	8270 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    81a8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    81ac:	00082a40 	call	82a4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    81b0:	01000074 	movhi	r4,1
    81b4:	21255b04 	addi	r4,r4,-27284
    81b8:	01400074 	movhi	r5,1
    81bc:	29655b04 	addi	r5,r5,-27284
    81c0:	01800074 	movhi	r6,1
    81c4:	31a55b04 	addi	r6,r6,-27284
    81c8:	0008a700 	call	8a70 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    81cc:	00088bc0 	call	88bc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    81d0:	01000074 	movhi	r4,1
    81d4:	21224604 	addi	r4,r4,-30440
    81d8:	00090a00 	call	90a0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    81dc:	d120bd17 	ldw	r4,-32012(gp)
    81e0:	d0e0be17 	ldw	r3,-32008(gp)
    81e4:	d0a0bf17 	ldw	r2,-32004(gp)
    81e8:	180b883a 	mov	r5,r3
    81ec:	100d883a 	mov	r6,r2
    81f0:	000805c0 	call	805c <main>
    81f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    81f8:	01000044 	movi	r4,1
    81fc:	00086b40 	call	86b4 <close>
  exit (result);
    8200:	e13fff17 	ldw	r4,-4(fp)
    8204:	00090b40 	call	90b4 <exit>

00008208 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    8208:	defffd04 	addi	sp,sp,-12
    820c:	dfc00215 	stw	ra,8(sp)
    8210:	df000115 	stw	fp,4(sp)
    8214:	df000104 	addi	fp,sp,4
    8218:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    821c:	e13fff17 	ldw	r4,-4(fp)
    8220:	00085100 	call	8510 <alt_busy_sleep>
}
    8224:	e037883a 	mov	sp,fp
    8228:	dfc00117 	ldw	ra,4(sp)
    822c:	df000017 	ldw	fp,0(sp)
    8230:	dec00204 	addi	sp,sp,8
    8234:	f800283a 	ret

00008238 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    8238:	defffd04 	addi	sp,sp,-12
    823c:	dfc00215 	stw	ra,8(sp)
    8240:	df000115 	stw	fp,4(sp)
    8244:	df000104 	addi	fp,sp,4
    8248:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    824c:	e13fff17 	ldw	r4,-4(fp)
    8250:	01400074 	movhi	r5,1
    8254:	29661504 	addi	r5,r5,-26540
    8258:	000881c0 	call	881c <alt_dev_llist_insert>
}
    825c:	e037883a 	mov	sp,fp
    8260:	dfc00117 	ldw	ra,4(sp)
    8264:	df000017 	ldw	fp,0(sp)
    8268:	dec00204 	addi	sp,sp,8
    826c:	f800283a 	ret

00008270 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8270:	defffd04 	addi	sp,sp,-12
    8274:	dfc00215 	stw	ra,8(sp)
    8278:	df000115 	stw	fp,4(sp)
    827c:	df000104 	addi	fp,sp,4
    8280:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
    8284:	0008e080 	call	8e08 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8288:	00800044 	movi	r2,1
    828c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8290:	e037883a 	mov	sp,fp
    8294:	dfc00117 	ldw	ra,4(sp)
    8298:	df000017 	ldw	fp,0(sp)
    829c:	dec00204 	addi	sp,sp,8
    82a0:	f800283a 	ret

000082a4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    82a4:	defffe04 	addi	sp,sp,-8
    82a8:	dfc00115 	stw	ra,4(sp)
    82ac:	df000015 	stw	fp,0(sp)
    82b0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    82b4:	01000074 	movhi	r4,1
    82b8:	21256604 	addi	r4,r4,-27240
    82bc:	00082380 	call	8238 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    82c0:	0001883a 	nop
}
    82c4:	e037883a 	mov	sp,fp
    82c8:	dfc00117 	ldw	ra,4(sp)
    82cc:	df000017 	ldw	fp,0(sp)
    82d0:	dec00204 	addi	sp,sp,8
    82d4:	f800283a 	ret

000082d8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    82d8:	defffa04 	addi	sp,sp,-24
    82dc:	dfc00515 	stw	ra,20(sp)
    82e0:	df000415 	stw	fp,16(sp)
    82e4:	df000404 	addi	fp,sp,16
    82e8:	e13ffd15 	stw	r4,-12(fp)
    82ec:	e17ffe15 	stw	r5,-8(fp)
    82f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    82f4:	e0bffd17 	ldw	r2,-12(fp)
    82f8:	10800017 	ldw	r2,0(r2)
    82fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    8300:	e0bffc17 	ldw	r2,-16(fp)
    8304:	10c00a04 	addi	r3,r2,40
    8308:	e0bffd17 	ldw	r2,-12(fp)
    830c:	10800217 	ldw	r2,8(r2)
    8310:	1809883a 	mov	r4,r3
    8314:	e17ffe17 	ldw	r5,-8(fp)
    8318:	e1bfff17 	ldw	r6,-4(fp)
    831c:	100f883a 	mov	r7,r2
    8320:	00083980 	call	8398 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    8324:	e037883a 	mov	sp,fp
    8328:	dfc00117 	ldw	ra,4(sp)
    832c:	df000017 	ldw	fp,0(sp)
    8330:	dec00204 	addi	sp,sp,8
    8334:	f800283a 	ret

00008338 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    8338:	defffa04 	addi	sp,sp,-24
    833c:	dfc00515 	stw	ra,20(sp)
    8340:	df000415 	stw	fp,16(sp)
    8344:	df000404 	addi	fp,sp,16
    8348:	e13ffd15 	stw	r4,-12(fp)
    834c:	e17ffe15 	stw	r5,-8(fp)
    8350:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8354:	e0bffd17 	ldw	r2,-12(fp)
    8358:	10800017 	ldw	r2,0(r2)
    835c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    8360:	e0bffc17 	ldw	r2,-16(fp)
    8364:	10c00a04 	addi	r3,r2,40
    8368:	e0bffd17 	ldw	r2,-12(fp)
    836c:	10800217 	ldw	r2,8(r2)
    8370:	1809883a 	mov	r4,r3
    8374:	e17ffe17 	ldw	r5,-8(fp)
    8378:	e1bfff17 	ldw	r6,-4(fp)
    837c:	100f883a 	mov	r7,r2
    8380:	000847c0 	call	847c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    8384:	e037883a 	mov	sp,fp
    8388:	dfc00117 	ldw	ra,4(sp)
    838c:	df000017 	ldw	fp,0(sp)
    8390:	dec00204 	addi	sp,sp,8
    8394:	f800283a 	ret

00008398 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    8398:	defff704 	addi	sp,sp,-36
    839c:	df000815 	stw	fp,32(sp)
    83a0:	df000804 	addi	fp,sp,32
    83a4:	e13ffc15 	stw	r4,-16(fp)
    83a8:	e17ffd15 	stw	r5,-12(fp)
    83ac:	e1bffe15 	stw	r6,-8(fp)
    83b0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    83b4:	e0bffc17 	ldw	r2,-16(fp)
    83b8:	10800017 	ldw	r2,0(r2)
    83bc:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    83c0:	e0bffd17 	ldw	r2,-12(fp)
    83c4:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    83c8:	e0bffe17 	ldw	r2,-8(fp)
    83cc:	e0fffd17 	ldw	r3,-12(fp)
    83d0:	1885883a 	add	r2,r3,r2
    83d4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    83d8:	00001406 	br	842c <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    83dc:	e0bff917 	ldw	r2,-28(fp)
    83e0:	10800037 	ldwio	r2,0(r2)
    83e4:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    83e8:	e0bffb17 	ldw	r2,-20(fp)
    83ec:	10a0000c 	andi	r2,r2,32768
    83f0:	10000626 	beq	r2,zero,840c <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    83f4:	e0bff817 	ldw	r2,-32(fp)
    83f8:	10c00044 	addi	r3,r2,1
    83fc:	e0fff815 	stw	r3,-32(fp)
    8400:	e0fffb17 	ldw	r3,-20(fp)
    8404:	10c00005 	stb	r3,0(r2)
    8408:	00000806 	br	842c <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    840c:	e0fff817 	ldw	r3,-32(fp)
    8410:	e0bffd17 	ldw	r2,-12(fp)
    8414:	18800126 	beq	r3,r2,841c <altera_avalon_jtag_uart_read+0x84>
      break;
    8418:	00000706 	br	8438 <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
    841c:	e0bfff17 	ldw	r2,-4(fp)
    8420:	1090000c 	andi	r2,r2,16384
    8424:	10000126 	beq	r2,zero,842c <altera_avalon_jtag_uart_read+0x94>
      break;   
    8428:	00000306 	br	8438 <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    842c:	e0fff817 	ldw	r3,-32(fp)
    8430:	e0bffa17 	ldw	r2,-24(fp)
    8434:	18bfe936 	bltu	r3,r2,83dc <_gp+0xffff6b90>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    8438:	e0fff817 	ldw	r3,-32(fp)
    843c:	e0bffd17 	ldw	r2,-12(fp)
    8440:	18800426 	beq	r3,r2,8454 <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
    8444:	e0fff817 	ldw	r3,-32(fp)
    8448:	e0bffd17 	ldw	r2,-12(fp)
    844c:	1885c83a 	sub	r2,r3,r2
    8450:	00000606 	br	846c <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
    8454:	e0bfff17 	ldw	r2,-4(fp)
    8458:	1090000c 	andi	r2,r2,16384
    845c:	10000226 	beq	r2,zero,8468 <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
    8460:	00bffd44 	movi	r2,-11
    8464:	00000106 	br	846c <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
    8468:	00bffec4 	movi	r2,-5
}
    846c:	e037883a 	mov	sp,fp
    8470:	df000017 	ldw	fp,0(sp)
    8474:	dec00104 	addi	sp,sp,4
    8478:	f800283a 	ret

0000847c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    847c:	defff904 	addi	sp,sp,-28
    8480:	df000615 	stw	fp,24(sp)
    8484:	df000604 	addi	fp,sp,24
    8488:	e13ffc15 	stw	r4,-16(fp)
    848c:	e17ffd15 	stw	r5,-12(fp)
    8490:	e1bffe15 	stw	r6,-8(fp)
    8494:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    8498:	e0bffc17 	ldw	r2,-16(fp)
    849c:	10800017 	ldw	r2,0(r2)
    84a0:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    84a4:	e0bffe17 	ldw	r2,-8(fp)
    84a8:	e0fffd17 	ldw	r3,-12(fp)
    84ac:	1885883a 	add	r2,r3,r2
    84b0:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    84b4:	00000e06 	br	84f0 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    84b8:	e0bffa17 	ldw	r2,-24(fp)
    84bc:	10800104 	addi	r2,r2,4
    84c0:	10800037 	ldwio	r2,0(r2)
    84c4:	10bfffec 	andhi	r2,r2,65535
    84c8:	10000926 	beq	r2,zero,84f0 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    84cc:	e0fffa17 	ldw	r3,-24(fp)
    84d0:	e0bffd17 	ldw	r2,-12(fp)
    84d4:	11000044 	addi	r4,r2,1
    84d8:	e13ffd15 	stw	r4,-12(fp)
    84dc:	10800003 	ldbu	r2,0(r2)
    84e0:	10803fcc 	andi	r2,r2,255
    84e4:	1080201c 	xori	r2,r2,128
    84e8:	10bfe004 	addi	r2,r2,-128
    84ec:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    84f0:	e0fffd17 	ldw	r3,-12(fp)
    84f4:	e0bffb17 	ldw	r2,-20(fp)
    84f8:	18bfef36 	bltu	r3,r2,84b8 <_gp+0xffff6c6c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    84fc:	e0bffe17 	ldw	r2,-8(fp)
}
    8500:	e037883a 	mov	sp,fp
    8504:	df000017 	ldw	fp,0(sp)
    8508:	dec00104 	addi	sp,sp,4
    850c:	f800283a 	ret

00008510 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8510:	defffa04 	addi	sp,sp,-24
    8514:	dfc00515 	stw	ra,20(sp)
    8518:	df000415 	stw	fp,16(sp)
    851c:	df000404 	addi	fp,sp,16
    8520:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    8524:	00800244 	movi	r2,9
    8528:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    852c:	e13ffd17 	ldw	r4,-12(fp)
    8530:	014003f4 	movhi	r5,15
    8534:	29509004 	addi	r5,r5,16960
    8538:	00095100 	call	9510 <__mulsi3>
    853c:	0100bef4 	movhi	r4,763
    8540:	213c2004 	addi	r4,r4,-3968
    8544:	100b883a 	mov	r5,r2
    8548:	00095000 	call	9500 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    854c:	01200034 	movhi	r4,32768
    8550:	213fffc4 	addi	r4,r4,-1
    8554:	100b883a 	mov	r5,r2
    8558:	00095000 	call	9500 <__udivsi3>
    855c:	e13fff17 	ldw	r4,-4(fp)
    8560:	100b883a 	mov	r5,r2
    8564:	00095000 	call	9500 <__udivsi3>
    8568:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    856c:	e0bffe17 	ldw	r2,-8(fp)
    8570:	10002926 	beq	r2,zero,8618 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
    8574:	e03ffc15 	stw	zero,-16(fp)
    8578:	00001606 	br	85d4 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    857c:	00a00034 	movhi	r2,32768
    8580:	10bfffc4 	addi	r2,r2,-1
    8584:	10bfffc4 	addi	r2,r2,-1
    8588:	103ffe1e 	bne	r2,zero,8584 <_gp+0xffff6d38>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    858c:	e13ffd17 	ldw	r4,-12(fp)
    8590:	014003f4 	movhi	r5,15
    8594:	29509004 	addi	r5,r5,16960
    8598:	00095100 	call	9510 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    859c:	0100bef4 	movhi	r4,763
    85a0:	213c2004 	addi	r4,r4,-3968
    85a4:	100b883a 	mov	r5,r2
    85a8:	00095000 	call	9500 <__udivsi3>
    85ac:	01200034 	movhi	r4,32768
    85b0:	213fffc4 	addi	r4,r4,-1
    85b4:	100b883a 	mov	r5,r2
    85b8:	00095000 	call	9500 <__udivsi3>
    85bc:	e0ffff17 	ldw	r3,-4(fp)
    85c0:	1885c83a 	sub	r2,r3,r2
    85c4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    85c8:	e0bffc17 	ldw	r2,-16(fp)
    85cc:	10800044 	addi	r2,r2,1
    85d0:	e0bffc15 	stw	r2,-16(fp)
    85d4:	e0fffc17 	ldw	r3,-16(fp)
    85d8:	e0bffe17 	ldw	r2,-8(fp)
    85dc:	18bfe716 	blt	r3,r2,857c <_gp+0xffff6d30>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    85e0:	e13ffd17 	ldw	r4,-12(fp)
    85e4:	014003f4 	movhi	r5,15
    85e8:	29509004 	addi	r5,r5,16960
    85ec:	00095100 	call	9510 <__mulsi3>
    85f0:	0100bef4 	movhi	r4,763
    85f4:	213c2004 	addi	r4,r4,-3968
    85f8:	100b883a 	mov	r5,r2
    85fc:	00095000 	call	9500 <__udivsi3>
    8600:	1009883a 	mov	r4,r2
    8604:	e17fff17 	ldw	r5,-4(fp)
    8608:	00095100 	call	9510 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    860c:	10bfffc4 	addi	r2,r2,-1
    8610:	103ffe1e 	bne	r2,zero,860c <_gp+0xffff6dc0>
    8614:	00000d06 	br	864c <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    8618:	e13ffd17 	ldw	r4,-12(fp)
    861c:	014003f4 	movhi	r5,15
    8620:	29509004 	addi	r5,r5,16960
    8624:	00095100 	call	9510 <__mulsi3>
    8628:	0100bef4 	movhi	r4,763
    862c:	213c2004 	addi	r4,r4,-3968
    8630:	100b883a 	mov	r5,r2
    8634:	00095000 	call	9500 <__udivsi3>
    8638:	1009883a 	mov	r4,r2
    863c:	e17fff17 	ldw	r5,-4(fp)
    8640:	00095100 	call	9510 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8644:	10bfffc4 	addi	r2,r2,-1
    8648:	00bffe16 	blt	zero,r2,8644 <_gp+0xffff6df8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    864c:	0005883a 	mov	r2,zero
}
    8650:	e037883a 	mov	sp,fp
    8654:	dfc00117 	ldw	ra,4(sp)
    8658:	df000017 	ldw	fp,0(sp)
    865c:	dec00204 	addi	sp,sp,8
    8660:	f800283a 	ret

00008664 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8664:	defffe04 	addi	sp,sp,-8
    8668:	dfc00115 	stw	ra,4(sp)
    866c:	df000015 	stw	fp,0(sp)
    8670:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8674:	00800074 	movhi	r2,1
    8678:	10a61804 	addi	r2,r2,-26528
    867c:	10800017 	ldw	r2,0(r2)
    8680:	10000526 	beq	r2,zero,8698 <alt_get_errno+0x34>
    8684:	00800074 	movhi	r2,1
    8688:	10a61804 	addi	r2,r2,-26528
    868c:	10800017 	ldw	r2,0(r2)
    8690:	103ee83a 	callr	r2
    8694:	00000206 	br	86a0 <alt_get_errno+0x3c>
    8698:	00800074 	movhi	r2,1
    869c:	10a6d304 	addi	r2,r2,-25780
}
    86a0:	e037883a 	mov	sp,fp
    86a4:	dfc00117 	ldw	ra,4(sp)
    86a8:	df000017 	ldw	fp,0(sp)
    86ac:	dec00204 	addi	sp,sp,8
    86b0:	f800283a 	ret

000086b4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    86b4:	defffb04 	addi	sp,sp,-20
    86b8:	dfc00415 	stw	ra,16(sp)
    86bc:	df000315 	stw	fp,12(sp)
    86c0:	df000304 	addi	fp,sp,12
    86c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    86c8:	e0bfff17 	ldw	r2,-4(fp)
    86cc:	10000816 	blt	r2,zero,86f0 <close+0x3c>
    86d0:	e13fff17 	ldw	r4,-4(fp)
    86d4:	01400304 	movi	r5,12
    86d8:	00095100 	call	9510 <__mulsi3>
    86dc:	1007883a 	mov	r3,r2
    86e0:	00800074 	movhi	r2,1
    86e4:	10a57b04 	addi	r2,r2,-27156
    86e8:	1885883a 	add	r2,r3,r2
    86ec:	00000106 	br	86f4 <close+0x40>
    86f0:	0005883a 	mov	r2,zero
    86f4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    86f8:	e0bffd17 	ldw	r2,-12(fp)
    86fc:	10001826 	beq	r2,zero,8760 <close+0xac>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    8700:	e0bffd17 	ldw	r2,-12(fp)
    8704:	10800017 	ldw	r2,0(r2)
    8708:	10800417 	ldw	r2,16(r2)
    870c:	10000626 	beq	r2,zero,8728 <close+0x74>
    8710:	e0bffd17 	ldw	r2,-12(fp)
    8714:	10800017 	ldw	r2,0(r2)
    8718:	10800417 	ldw	r2,16(r2)
    871c:	e13ffd17 	ldw	r4,-12(fp)
    8720:	103ee83a 	callr	r2
    8724:	00000106 	br	872c <close+0x78>
    8728:	0005883a 	mov	r2,zero
    872c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    8730:	e13fff17 	ldw	r4,-4(fp)
    8734:	0008d880 	call	8d88 <alt_release_fd>
    if (rval < 0)
    8738:	e0bffe17 	ldw	r2,-8(fp)
    873c:	1000060e 	bge	r2,zero,8758 <close+0xa4>
    {
      ALT_ERRNO = -rval;
    8740:	00086640 	call	8664 <alt_get_errno>
    8744:	e0fffe17 	ldw	r3,-8(fp)
    8748:	00c7c83a 	sub	r3,zero,r3
    874c:	10c00015 	stw	r3,0(r2)
      return -1;
    8750:	00bfffc4 	movi	r2,-1
    8754:	00000606 	br	8770 <close+0xbc>
    }
    return 0;
    8758:	0005883a 	mov	r2,zero
    875c:	00000406 	br	8770 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    8760:	00086640 	call	8664 <alt_get_errno>
    8764:	00c01444 	movi	r3,81
    8768:	10c00015 	stw	r3,0(r2)
    return -1;
    876c:	00bfffc4 	movi	r2,-1
  }
}
    8770:	e037883a 	mov	sp,fp
    8774:	dfc00117 	ldw	ra,4(sp)
    8778:	df000017 	ldw	fp,0(sp)
    877c:	dec00204 	addi	sp,sp,8
    8780:	f800283a 	ret

00008784 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8784:	deffff04 	addi	sp,sp,-4
    8788:	df000015 	stw	fp,0(sp)
    878c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    8790:	e037883a 	mov	sp,fp
    8794:	df000017 	ldw	fp,0(sp)
    8798:	dec00104 	addi	sp,sp,4
    879c:	f800283a 	ret

000087a0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    87a0:	defffc04 	addi	sp,sp,-16
    87a4:	df000315 	stw	fp,12(sp)
    87a8:	df000304 	addi	fp,sp,12
    87ac:	e13ffd15 	stw	r4,-12(fp)
    87b0:	e17ffe15 	stw	r5,-8(fp)
    87b4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    87b8:	e0bfff17 	ldw	r2,-4(fp)
}
    87bc:	e037883a 	mov	sp,fp
    87c0:	df000017 	ldw	fp,0(sp)
    87c4:	dec00104 	addi	sp,sp,4
    87c8:	f800283a 	ret

000087cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    87cc:	defffe04 	addi	sp,sp,-8
    87d0:	dfc00115 	stw	ra,4(sp)
    87d4:	df000015 	stw	fp,0(sp)
    87d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    87dc:	00800074 	movhi	r2,1
    87e0:	10a61804 	addi	r2,r2,-26528
    87e4:	10800017 	ldw	r2,0(r2)
    87e8:	10000526 	beq	r2,zero,8800 <alt_get_errno+0x34>
    87ec:	00800074 	movhi	r2,1
    87f0:	10a61804 	addi	r2,r2,-26528
    87f4:	10800017 	ldw	r2,0(r2)
    87f8:	103ee83a 	callr	r2
    87fc:	00000206 	br	8808 <alt_get_errno+0x3c>
    8800:	00800074 	movhi	r2,1
    8804:	10a6d304 	addi	r2,r2,-25780
}
    8808:	e037883a 	mov	sp,fp
    880c:	dfc00117 	ldw	ra,4(sp)
    8810:	df000017 	ldw	fp,0(sp)
    8814:	dec00204 	addi	sp,sp,8
    8818:	f800283a 	ret

0000881c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    881c:	defffa04 	addi	sp,sp,-24
    8820:	dfc00515 	stw	ra,20(sp)
    8824:	df000415 	stw	fp,16(sp)
    8828:	df000404 	addi	fp,sp,16
    882c:	e13ffe15 	stw	r4,-8(fp)
    8830:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    8834:	e0bffe17 	ldw	r2,-8(fp)
    8838:	10000326 	beq	r2,zero,8848 <alt_dev_llist_insert+0x2c>
    883c:	e0bffe17 	ldw	r2,-8(fp)
    8840:	10800217 	ldw	r2,8(r2)
    8844:	1000051e 	bne	r2,zero,885c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    8848:	00087cc0 	call	87cc <alt_get_errno>
    884c:	00c00584 	movi	r3,22
    8850:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    8854:	00bffa84 	movi	r2,-22
    8858:	00001306 	br	88a8 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    885c:	e0bffe17 	ldw	r2,-8(fp)
    8860:	e0ffff17 	ldw	r3,-4(fp)
    8864:	e0fffc15 	stw	r3,-16(fp)
    8868:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    886c:	e0bffd17 	ldw	r2,-12(fp)
    8870:	e0fffc17 	ldw	r3,-16(fp)
    8874:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    8878:	e0bffc17 	ldw	r2,-16(fp)
    887c:	10c00017 	ldw	r3,0(r2)
    8880:	e0bffd17 	ldw	r2,-12(fp)
    8884:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    8888:	e0bffc17 	ldw	r2,-16(fp)
    888c:	10800017 	ldw	r2,0(r2)
    8890:	e0fffd17 	ldw	r3,-12(fp)
    8894:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    8898:	e0bffc17 	ldw	r2,-16(fp)
    889c:	e0fffd17 	ldw	r3,-12(fp)
    88a0:	10c00015 	stw	r3,0(r2)

  return 0;  
    88a4:	0005883a 	mov	r2,zero
}
    88a8:	e037883a 	mov	sp,fp
    88ac:	dfc00117 	ldw	ra,4(sp)
    88b0:	df000017 	ldw	fp,0(sp)
    88b4:	dec00204 	addi	sp,sp,8
    88b8:	f800283a 	ret

000088bc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    88bc:	defffd04 	addi	sp,sp,-12
    88c0:	dfc00215 	stw	ra,8(sp)
    88c4:	df000115 	stw	fp,4(sp)
    88c8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    88cc:	00800074 	movhi	r2,1
    88d0:	10a55a04 	addi	r2,r2,-27288
    88d4:	e0bfff15 	stw	r2,-4(fp)
    88d8:	00000606 	br	88f4 <_do_ctors+0x38>
        (*ctor) (); 
    88dc:	e0bfff17 	ldw	r2,-4(fp)
    88e0:	10800017 	ldw	r2,0(r2)
    88e4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    88e8:	e0bfff17 	ldw	r2,-4(fp)
    88ec:	10bfff04 	addi	r2,r2,-4
    88f0:	e0bfff15 	stw	r2,-4(fp)
    88f4:	e0ffff17 	ldw	r3,-4(fp)
    88f8:	00800074 	movhi	r2,1
    88fc:	10a55b04 	addi	r2,r2,-27284
    8900:	18bff62e 	bgeu	r3,r2,88dc <_gp+0xffff7090>
        (*ctor) (); 
}
    8904:	e037883a 	mov	sp,fp
    8908:	dfc00117 	ldw	ra,4(sp)
    890c:	df000017 	ldw	fp,0(sp)
    8910:	dec00204 	addi	sp,sp,8
    8914:	f800283a 	ret

00008918 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    8918:	defffd04 	addi	sp,sp,-12
    891c:	dfc00215 	stw	ra,8(sp)
    8920:	df000115 	stw	fp,4(sp)
    8924:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    8928:	00800074 	movhi	r2,1
    892c:	10a55a04 	addi	r2,r2,-27288
    8930:	e0bfff15 	stw	r2,-4(fp)
    8934:	00000606 	br	8950 <_do_dtors+0x38>
        (*dtor) (); 
    8938:	e0bfff17 	ldw	r2,-4(fp)
    893c:	10800017 	ldw	r2,0(r2)
    8940:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    8944:	e0bfff17 	ldw	r2,-4(fp)
    8948:	10bfff04 	addi	r2,r2,-4
    894c:	e0bfff15 	stw	r2,-4(fp)
    8950:	e0ffff17 	ldw	r3,-4(fp)
    8954:	00800074 	movhi	r2,1
    8958:	10a55b04 	addi	r2,r2,-27284
    895c:	18bff62e 	bgeu	r3,r2,8938 <_gp+0xffff70ec>
        (*dtor) (); 
}
    8960:	e037883a 	mov	sp,fp
    8964:	dfc00117 	ldw	ra,4(sp)
    8968:	df000017 	ldw	fp,0(sp)
    896c:	dec00204 	addi	sp,sp,8
    8970:	f800283a 	ret

00008974 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8974:	deffff04 	addi	sp,sp,-4
    8978:	df000015 	stw	fp,0(sp)
    897c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    8980:	e037883a 	mov	sp,fp
    8984:	df000017 	ldw	fp,0(sp)
    8988:	dec00104 	addi	sp,sp,4
    898c:	f800283a 	ret

00008990 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    8990:	defff804 	addi	sp,sp,-32
    8994:	dfc00715 	stw	ra,28(sp)
    8998:	df000615 	stw	fp,24(sp)
    899c:	dc000515 	stw	r16,20(sp)
    89a0:	df000604 	addi	fp,sp,24
    89a4:	e13ffb15 	stw	r4,-20(fp)
    89a8:	e17ffc15 	stw	r5,-16(fp)
    89ac:	e1bffd15 	stw	r6,-12(fp)
    89b0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    89b4:	e13ffc17 	ldw	r4,-16(fp)
    89b8:	e17ffd17 	ldw	r5,-12(fp)
    89bc:	e1bffe17 	ldw	r6,-8(fp)
    89c0:	0008c2c0 	call	8c2c <open>
    89c4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    89c8:	e0bffa17 	ldw	r2,-24(fp)
    89cc:	10002216 	blt	r2,zero,8a58 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    89d0:	04000074 	movhi	r16,1
    89d4:	84257b04 	addi	r16,r16,-27156
    89d8:	e0bffa17 	ldw	r2,-24(fp)
    89dc:	1009883a 	mov	r4,r2
    89e0:	01400304 	movi	r5,12
    89e4:	00095100 	call	9510 <__mulsi3>
    89e8:	8085883a 	add	r2,r16,r2
    89ec:	10c00017 	ldw	r3,0(r2)
    89f0:	e0bffb17 	ldw	r2,-20(fp)
    89f4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    89f8:	04000074 	movhi	r16,1
    89fc:	84257b04 	addi	r16,r16,-27156
    8a00:	e0bffa17 	ldw	r2,-24(fp)
    8a04:	1009883a 	mov	r4,r2
    8a08:	01400304 	movi	r5,12
    8a0c:	00095100 	call	9510 <__mulsi3>
    8a10:	8085883a 	add	r2,r16,r2
    8a14:	10800104 	addi	r2,r2,4
    8a18:	10c00017 	ldw	r3,0(r2)
    8a1c:	e0bffb17 	ldw	r2,-20(fp)
    8a20:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    8a24:	04000074 	movhi	r16,1
    8a28:	84257b04 	addi	r16,r16,-27156
    8a2c:	e0bffa17 	ldw	r2,-24(fp)
    8a30:	1009883a 	mov	r4,r2
    8a34:	01400304 	movi	r5,12
    8a38:	00095100 	call	9510 <__mulsi3>
    8a3c:	8085883a 	add	r2,r16,r2
    8a40:	10800204 	addi	r2,r2,8
    8a44:	10c00017 	ldw	r3,0(r2)
    8a48:	e0bffb17 	ldw	r2,-20(fp)
    8a4c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    8a50:	e13ffa17 	ldw	r4,-24(fp)
    8a54:	0008d880 	call	8d88 <alt_release_fd>
  }
} 
    8a58:	e6ffff04 	addi	sp,fp,-4
    8a5c:	dfc00217 	ldw	ra,8(sp)
    8a60:	df000117 	ldw	fp,4(sp)
    8a64:	dc000017 	ldw	r16,0(sp)
    8a68:	dec00304 	addi	sp,sp,12
    8a6c:	f800283a 	ret

00008a70 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    8a70:	defffb04 	addi	sp,sp,-20
    8a74:	dfc00415 	stw	ra,16(sp)
    8a78:	df000315 	stw	fp,12(sp)
    8a7c:	df000304 	addi	fp,sp,12
    8a80:	e13ffd15 	stw	r4,-12(fp)
    8a84:	e17ffe15 	stw	r5,-8(fp)
    8a88:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    8a8c:	01000074 	movhi	r4,1
    8a90:	21257e04 	addi	r4,r4,-27144
    8a94:	e17ffd17 	ldw	r5,-12(fp)
    8a98:	01800044 	movi	r6,1
    8a9c:	01c07fc4 	movi	r7,511
    8aa0:	00089900 	call	8990 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    8aa4:	01000074 	movhi	r4,1
    8aa8:	21257b04 	addi	r4,r4,-27156
    8aac:	e17ffe17 	ldw	r5,-8(fp)
    8ab0:	000d883a 	mov	r6,zero
    8ab4:	01c07fc4 	movi	r7,511
    8ab8:	00089900 	call	8990 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    8abc:	01000074 	movhi	r4,1
    8ac0:	21258104 	addi	r4,r4,-27132
    8ac4:	e17fff17 	ldw	r5,-4(fp)
    8ac8:	01800044 	movi	r6,1
    8acc:	01c07fc4 	movi	r7,511
    8ad0:	00089900 	call	8990 <alt_open_fd>
}  
    8ad4:	e037883a 	mov	sp,fp
    8ad8:	dfc00117 	ldw	ra,4(sp)
    8adc:	df000017 	ldw	fp,0(sp)
    8ae0:	dec00204 	addi	sp,sp,8
    8ae4:	f800283a 	ret

00008ae8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8ae8:	defffe04 	addi	sp,sp,-8
    8aec:	dfc00115 	stw	ra,4(sp)
    8af0:	df000015 	stw	fp,0(sp)
    8af4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8af8:	00800074 	movhi	r2,1
    8afc:	10a61804 	addi	r2,r2,-26528
    8b00:	10800017 	ldw	r2,0(r2)
    8b04:	10000526 	beq	r2,zero,8b1c <alt_get_errno+0x34>
    8b08:	00800074 	movhi	r2,1
    8b0c:	10a61804 	addi	r2,r2,-26528
    8b10:	10800017 	ldw	r2,0(r2)
    8b14:	103ee83a 	callr	r2
    8b18:	00000206 	br	8b24 <alt_get_errno+0x3c>
    8b1c:	00800074 	movhi	r2,1
    8b20:	10a6d304 	addi	r2,r2,-25780
}
    8b24:	e037883a 	mov	sp,fp
    8b28:	dfc00117 	ldw	ra,4(sp)
    8b2c:	df000017 	ldw	fp,0(sp)
    8b30:	dec00204 	addi	sp,sp,8
    8b34:	f800283a 	ret

00008b38 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    8b38:	defffb04 	addi	sp,sp,-20
    8b3c:	dfc00415 	stw	ra,16(sp)
    8b40:	df000315 	stw	fp,12(sp)
    8b44:	dc000215 	stw	r16,8(sp)
    8b48:	df000304 	addi	fp,sp,12
    8b4c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    8b50:	e0bffe17 	ldw	r2,-8(fp)
    8b54:	10800217 	ldw	r2,8(r2)
    8b58:	10d00034 	orhi	r3,r2,16384
    8b5c:	e0bffe17 	ldw	r2,-8(fp)
    8b60:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8b64:	e03ffd15 	stw	zero,-12(fp)
    8b68:	00002306 	br	8bf8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    8b6c:	04000074 	movhi	r16,1
    8b70:	84257b04 	addi	r16,r16,-27156
    8b74:	e0bffd17 	ldw	r2,-12(fp)
    8b78:	1009883a 	mov	r4,r2
    8b7c:	01400304 	movi	r5,12
    8b80:	00095100 	call	9510 <__mulsi3>
    8b84:	8085883a 	add	r2,r16,r2
    8b88:	10c00017 	ldw	r3,0(r2)
    8b8c:	e0bffe17 	ldw	r2,-8(fp)
    8b90:	10800017 	ldw	r2,0(r2)
    8b94:	1880151e 	bne	r3,r2,8bec <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    8b98:	04000074 	movhi	r16,1
    8b9c:	84257b04 	addi	r16,r16,-27156
    8ba0:	e0bffd17 	ldw	r2,-12(fp)
    8ba4:	1009883a 	mov	r4,r2
    8ba8:	01400304 	movi	r5,12
    8bac:	00095100 	call	9510 <__mulsi3>
    8bb0:	8085883a 	add	r2,r16,r2
    8bb4:	10800204 	addi	r2,r2,8
    8bb8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    8bbc:	10000b0e 	bge	r2,zero,8bec <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    8bc0:	e13ffd17 	ldw	r4,-12(fp)
    8bc4:	01400304 	movi	r5,12
    8bc8:	00095100 	call	9510 <__mulsi3>
    8bcc:	1007883a 	mov	r3,r2
    8bd0:	00800074 	movhi	r2,1
    8bd4:	10a57b04 	addi	r2,r2,-27156
    8bd8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    8bdc:	e0bffe17 	ldw	r2,-8(fp)
    8be0:	18800226 	beq	r3,r2,8bec <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    8be4:	00bffcc4 	movi	r2,-13
    8be8:	00000a06 	br	8c14 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8bec:	e0bffd17 	ldw	r2,-12(fp)
    8bf0:	10800044 	addi	r2,r2,1
    8bf4:	e0bffd15 	stw	r2,-12(fp)
    8bf8:	00800074 	movhi	r2,1
    8bfc:	10a61704 	addi	r2,r2,-26532
    8c00:	10800017 	ldw	r2,0(r2)
    8c04:	1007883a 	mov	r3,r2
    8c08:	e0bffd17 	ldw	r2,-12(fp)
    8c0c:	18bfd72e 	bgeu	r3,r2,8b6c <_gp+0xffff7320>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    8c10:	0005883a 	mov	r2,zero
}
    8c14:	e6ffff04 	addi	sp,fp,-4
    8c18:	dfc00217 	ldw	ra,8(sp)
    8c1c:	df000117 	ldw	fp,4(sp)
    8c20:	dc000017 	ldw	r16,0(sp)
    8c24:	dec00304 	addi	sp,sp,12
    8c28:	f800283a 	ret

00008c2c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    8c2c:	defff604 	addi	sp,sp,-40
    8c30:	dfc00915 	stw	ra,36(sp)
    8c34:	df000815 	stw	fp,32(sp)
    8c38:	df000804 	addi	fp,sp,32
    8c3c:	e13ffd15 	stw	r4,-12(fp)
    8c40:	e17ffe15 	stw	r5,-8(fp)
    8c44:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    8c48:	00bfffc4 	movi	r2,-1
    8c4c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    8c50:	00bffb44 	movi	r2,-19
    8c54:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    8c58:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    8c5c:	e13ffd17 	ldw	r4,-12(fp)
    8c60:	01400074 	movhi	r5,1
    8c64:	29661504 	addi	r5,r5,-26540
    8c68:	0008e280 	call	8e28 <alt_find_dev>
    8c6c:	e0bff815 	stw	r2,-32(fp)
    8c70:	e0bff817 	ldw	r2,-32(fp)
    8c74:	1000051e 	bne	r2,zero,8c8c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    8c78:	e13ffd17 	ldw	r4,-12(fp)
    8c7c:	0008eb80 	call	8eb8 <alt_find_file>
    8c80:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    8c84:	00800044 	movi	r2,1
    8c88:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    8c8c:	e0bff817 	ldw	r2,-32(fp)
    8c90:	10002b26 	beq	r2,zero,8d40 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    8c94:	e13ff817 	ldw	r4,-32(fp)
    8c98:	0008fcc0 	call	8fcc <alt_get_fd>
    8c9c:	e0bff915 	stw	r2,-28(fp)
    8ca0:	e0bff917 	ldw	r2,-28(fp)
    8ca4:	1000030e 	bge	r2,zero,8cb4 <open+0x88>
    {
      status = index;
    8ca8:	e0bff917 	ldw	r2,-28(fp)
    8cac:	e0bffa15 	stw	r2,-24(fp)
    8cb0:	00002506 	br	8d48 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    8cb4:	e13ff917 	ldw	r4,-28(fp)
    8cb8:	01400304 	movi	r5,12
    8cbc:	00095100 	call	9510 <__mulsi3>
    8cc0:	1007883a 	mov	r3,r2
    8cc4:	00800074 	movhi	r2,1
    8cc8:	10a57b04 	addi	r2,r2,-27156
    8ccc:	1885883a 	add	r2,r3,r2
    8cd0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    8cd4:	e0fffe17 	ldw	r3,-8(fp)
    8cd8:	00900034 	movhi	r2,16384
    8cdc:	10bfffc4 	addi	r2,r2,-1
    8ce0:	1886703a 	and	r3,r3,r2
    8ce4:	e0bffc17 	ldw	r2,-16(fp)
    8ce8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    8cec:	e0bffb17 	ldw	r2,-20(fp)
    8cf0:	1000051e 	bne	r2,zero,8d08 <open+0xdc>
    8cf4:	e13ffc17 	ldw	r4,-16(fp)
    8cf8:	0008b380 	call	8b38 <alt_file_locked>
    8cfc:	e0bffa15 	stw	r2,-24(fp)
    8d00:	e0bffa17 	ldw	r2,-24(fp)
    8d04:	10001016 	blt	r2,zero,8d48 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    8d08:	e0bff817 	ldw	r2,-32(fp)
    8d0c:	10800317 	ldw	r2,12(r2)
    8d10:	10000826 	beq	r2,zero,8d34 <open+0x108>
    8d14:	e0bff817 	ldw	r2,-32(fp)
    8d18:	10800317 	ldw	r2,12(r2)
    8d1c:	e13ffc17 	ldw	r4,-16(fp)
    8d20:	e17ffd17 	ldw	r5,-12(fp)
    8d24:	e1bffe17 	ldw	r6,-8(fp)
    8d28:	e1ffff17 	ldw	r7,-4(fp)
    8d2c:	103ee83a 	callr	r2
    8d30:	00000106 	br	8d38 <open+0x10c>
    8d34:	0005883a 	mov	r2,zero
    8d38:	e0bffa15 	stw	r2,-24(fp)
    8d3c:	00000206 	br	8d48 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    8d40:	00bffb44 	movi	r2,-19
    8d44:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    8d48:	e0bffa17 	ldw	r2,-24(fp)
    8d4c:	1000080e 	bge	r2,zero,8d70 <open+0x144>
  {
    alt_release_fd (index);  
    8d50:	e13ff917 	ldw	r4,-28(fp)
    8d54:	0008d880 	call	8d88 <alt_release_fd>
    ALT_ERRNO = -status;
    8d58:	0008ae80 	call	8ae8 <alt_get_errno>
    8d5c:	e0fffa17 	ldw	r3,-24(fp)
    8d60:	00c7c83a 	sub	r3,zero,r3
    8d64:	10c00015 	stw	r3,0(r2)
    return -1;
    8d68:	00bfffc4 	movi	r2,-1
    8d6c:	00000106 	br	8d74 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    8d70:	e0bff917 	ldw	r2,-28(fp)
}
    8d74:	e037883a 	mov	sp,fp
    8d78:	dfc00117 	ldw	ra,4(sp)
    8d7c:	df000017 	ldw	fp,0(sp)
    8d80:	dec00204 	addi	sp,sp,8
    8d84:	f800283a 	ret

00008d88 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    8d88:	defffc04 	addi	sp,sp,-16
    8d8c:	dfc00315 	stw	ra,12(sp)
    8d90:	df000215 	stw	fp,8(sp)
    8d94:	dc000115 	stw	r16,4(sp)
    8d98:	df000204 	addi	fp,sp,8
    8d9c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    8da0:	e0bffe17 	ldw	r2,-8(fp)
    8da4:	108000d0 	cmplti	r2,r2,3
    8da8:	1000111e 	bne	r2,zero,8df0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    8dac:	04000074 	movhi	r16,1
    8db0:	84257b04 	addi	r16,r16,-27156
    8db4:	e0bffe17 	ldw	r2,-8(fp)
    8db8:	1009883a 	mov	r4,r2
    8dbc:	01400304 	movi	r5,12
    8dc0:	00095100 	call	9510 <__mulsi3>
    8dc4:	8085883a 	add	r2,r16,r2
    8dc8:	10800204 	addi	r2,r2,8
    8dcc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    8dd0:	04000074 	movhi	r16,1
    8dd4:	84257b04 	addi	r16,r16,-27156
    8dd8:	e0bffe17 	ldw	r2,-8(fp)
    8ddc:	1009883a 	mov	r4,r2
    8de0:	01400304 	movi	r5,12
    8de4:	00095100 	call	9510 <__mulsi3>
    8de8:	8085883a 	add	r2,r16,r2
    8dec:	10000015 	stw	zero,0(r2)
  }
}
    8df0:	e6ffff04 	addi	sp,fp,-4
    8df4:	dfc00217 	ldw	ra,8(sp)
    8df8:	df000117 	ldw	fp,4(sp)
    8dfc:	dc000017 	ldw	r16,0(sp)
    8e00:	dec00304 	addi	sp,sp,12
    8e04:	f800283a 	ret

00008e08 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    8e08:	deffff04 	addi	sp,sp,-4
    8e0c:	df000015 	stw	fp,0(sp)
    8e10:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    8e14:	000170fa 	wrctl	ienable,zero
}
    8e18:	e037883a 	mov	sp,fp
    8e1c:	df000017 	ldw	fp,0(sp)
    8e20:	dec00104 	addi	sp,sp,4
    8e24:	f800283a 	ret

00008e28 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    8e28:	defffa04 	addi	sp,sp,-24
    8e2c:	dfc00515 	stw	ra,20(sp)
    8e30:	df000415 	stw	fp,16(sp)
    8e34:	df000404 	addi	fp,sp,16
    8e38:	e13ffe15 	stw	r4,-8(fp)
    8e3c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    8e40:	e0bfff17 	ldw	r2,-4(fp)
    8e44:	10800017 	ldw	r2,0(r2)
    8e48:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    8e4c:	e13ffe17 	ldw	r4,-8(fp)
    8e50:	00091040 	call	9104 <strlen>
    8e54:	10800044 	addi	r2,r2,1
    8e58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    8e5c:	00000d06 	br	8e94 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    8e60:	e0bffc17 	ldw	r2,-16(fp)
    8e64:	10c00217 	ldw	r3,8(r2)
    8e68:	e0bffd17 	ldw	r2,-12(fp)
    8e6c:	1809883a 	mov	r4,r3
    8e70:	e17ffe17 	ldw	r5,-8(fp)
    8e74:	100d883a 	mov	r6,r2
    8e78:	00090d40 	call	90d4 <memcmp>
    8e7c:	1000021e 	bne	r2,zero,8e88 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    8e80:	e0bffc17 	ldw	r2,-16(fp)
    8e84:	00000706 	br	8ea4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    8e88:	e0bffc17 	ldw	r2,-16(fp)
    8e8c:	10800017 	ldw	r2,0(r2)
    8e90:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    8e94:	e0fffc17 	ldw	r3,-16(fp)
    8e98:	e0bfff17 	ldw	r2,-4(fp)
    8e9c:	18bff01e 	bne	r3,r2,8e60 <_gp+0xffff7614>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    8ea0:	0005883a 	mov	r2,zero
}
    8ea4:	e037883a 	mov	sp,fp
    8ea8:	dfc00117 	ldw	ra,4(sp)
    8eac:	df000017 	ldw	fp,0(sp)
    8eb0:	dec00204 	addi	sp,sp,8
    8eb4:	f800283a 	ret

00008eb8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    8eb8:	defffb04 	addi	sp,sp,-20
    8ebc:	dfc00415 	stw	ra,16(sp)
    8ec0:	df000315 	stw	fp,12(sp)
    8ec4:	df000304 	addi	fp,sp,12
    8ec8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    8ecc:	00800074 	movhi	r2,1
    8ed0:	10a61304 	addi	r2,r2,-26548
    8ed4:	10800017 	ldw	r2,0(r2)
    8ed8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    8edc:	00003106 	br	8fa4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    8ee0:	e0bffd17 	ldw	r2,-12(fp)
    8ee4:	10800217 	ldw	r2,8(r2)
    8ee8:	1009883a 	mov	r4,r2
    8eec:	00091040 	call	9104 <strlen>
    8ef0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    8ef4:	e0bffd17 	ldw	r2,-12(fp)
    8ef8:	10c00217 	ldw	r3,8(r2)
    8efc:	e0bffe17 	ldw	r2,-8(fp)
    8f00:	10bfffc4 	addi	r2,r2,-1
    8f04:	1885883a 	add	r2,r3,r2
    8f08:	10800003 	ldbu	r2,0(r2)
    8f0c:	10803fcc 	andi	r2,r2,255
    8f10:	1080201c 	xori	r2,r2,128
    8f14:	10bfe004 	addi	r2,r2,-128
    8f18:	10800bd8 	cmpnei	r2,r2,47
    8f1c:	1000031e 	bne	r2,zero,8f2c <alt_find_file+0x74>
    {
      len -= 1;
    8f20:	e0bffe17 	ldw	r2,-8(fp)
    8f24:	10bfffc4 	addi	r2,r2,-1
    8f28:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    8f2c:	e0bffe17 	ldw	r2,-8(fp)
    8f30:	e0ffff17 	ldw	r3,-4(fp)
    8f34:	1885883a 	add	r2,r3,r2
    8f38:	10800003 	ldbu	r2,0(r2)
    8f3c:	10803fcc 	andi	r2,r2,255
    8f40:	1080201c 	xori	r2,r2,128
    8f44:	10bfe004 	addi	r2,r2,-128
    8f48:	10800be0 	cmpeqi	r2,r2,47
    8f4c:	1000081e 	bne	r2,zero,8f70 <alt_find_file+0xb8>
    8f50:	e0bffe17 	ldw	r2,-8(fp)
    8f54:	e0ffff17 	ldw	r3,-4(fp)
    8f58:	1885883a 	add	r2,r3,r2
    8f5c:	10800003 	ldbu	r2,0(r2)
    8f60:	10803fcc 	andi	r2,r2,255
    8f64:	1080201c 	xori	r2,r2,128
    8f68:	10bfe004 	addi	r2,r2,-128
    8f6c:	10000a1e 	bne	r2,zero,8f98 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    8f70:	e0bffd17 	ldw	r2,-12(fp)
    8f74:	10c00217 	ldw	r3,8(r2)
    8f78:	e0bffe17 	ldw	r2,-8(fp)
    8f7c:	1809883a 	mov	r4,r3
    8f80:	e17fff17 	ldw	r5,-4(fp)
    8f84:	100d883a 	mov	r6,r2
    8f88:	00090d40 	call	90d4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    8f8c:	1000021e 	bne	r2,zero,8f98 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    8f90:	e0bffd17 	ldw	r2,-12(fp)
    8f94:	00000806 	br	8fb8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    8f98:	e0bffd17 	ldw	r2,-12(fp)
    8f9c:	10800017 	ldw	r2,0(r2)
    8fa0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    8fa4:	e0fffd17 	ldw	r3,-12(fp)
    8fa8:	00800074 	movhi	r2,1
    8fac:	10a61304 	addi	r2,r2,-26548
    8fb0:	18bfcb1e 	bne	r3,r2,8ee0 <_gp+0xffff7694>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    8fb4:	0005883a 	mov	r2,zero
}
    8fb8:	e037883a 	mov	sp,fp
    8fbc:	dfc00117 	ldw	ra,4(sp)
    8fc0:	df000017 	ldw	fp,0(sp)
    8fc4:	dec00204 	addi	sp,sp,8
    8fc8:	f800283a 	ret

00008fcc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    8fcc:	defffa04 	addi	sp,sp,-24
    8fd0:	dfc00515 	stw	ra,20(sp)
    8fd4:	df000415 	stw	fp,16(sp)
    8fd8:	dc000315 	stw	r16,12(sp)
    8fdc:	df000404 	addi	fp,sp,16
    8fe0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    8fe4:	00bffa04 	movi	r2,-24
    8fe8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    8fec:	e03ffc15 	stw	zero,-16(fp)
    8ff0:	00002106 	br	9078 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    8ff4:	04000074 	movhi	r16,1
    8ff8:	84257b04 	addi	r16,r16,-27156
    8ffc:	e0bffc17 	ldw	r2,-16(fp)
    9000:	1009883a 	mov	r4,r2
    9004:	01400304 	movi	r5,12
    9008:	00095100 	call	9510 <__mulsi3>
    900c:	8085883a 	add	r2,r16,r2
    9010:	10800017 	ldw	r2,0(r2)
    9014:	1000151e 	bne	r2,zero,906c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    9018:	04000074 	movhi	r16,1
    901c:	84257b04 	addi	r16,r16,-27156
    9020:	e0bffc17 	ldw	r2,-16(fp)
    9024:	1009883a 	mov	r4,r2
    9028:	01400304 	movi	r5,12
    902c:	00095100 	call	9510 <__mulsi3>
    9030:	8085883a 	add	r2,r16,r2
    9034:	e0fffe17 	ldw	r3,-8(fp)
    9038:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    903c:	00800074 	movhi	r2,1
    9040:	10a61704 	addi	r2,r2,-26532
    9044:	10c00017 	ldw	r3,0(r2)
    9048:	e0bffc17 	ldw	r2,-16(fp)
    904c:	1880040e 	bge	r3,r2,9060 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    9050:	00800074 	movhi	r2,1
    9054:	10a61704 	addi	r2,r2,-26532
    9058:	e0fffc17 	ldw	r3,-16(fp)
    905c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    9060:	e0bffc17 	ldw	r2,-16(fp)
    9064:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    9068:	00000606 	br	9084 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    906c:	e0bffc17 	ldw	r2,-16(fp)
    9070:	10800044 	addi	r2,r2,1
    9074:	e0bffc15 	stw	r2,-16(fp)
    9078:	e0bffc17 	ldw	r2,-16(fp)
    907c:	10800810 	cmplti	r2,r2,32
    9080:	103fdc1e 	bne	r2,zero,8ff4 <_gp+0xffff77a8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    9084:	e0bffd17 	ldw	r2,-12(fp)
}
    9088:	e6ffff04 	addi	sp,fp,-4
    908c:	dfc00217 	ldw	ra,8(sp)
    9090:	df000117 	ldw	fp,4(sp)
    9094:	dc000017 	ldw	r16,0(sp)
    9098:	dec00304 	addi	sp,sp,12
    909c:	f800283a 	ret

000090a0 <atexit>:
    90a0:	200b883a 	mov	r5,r4
    90a4:	000d883a 	mov	r6,zero
    90a8:	0009883a 	mov	r4,zero
    90ac:	000f883a 	mov	r7,zero
    90b0:	00091201 	jmpi	9120 <__register_exitproc>

000090b4 <exit>:
    90b4:	defffe04 	addi	sp,sp,-8
    90b8:	000b883a 	mov	r5,zero
    90bc:	dc000015 	stw	r16,0(sp)
    90c0:	dfc00115 	stw	ra,4(sp)
    90c4:	2021883a 	mov	r16,r4
    90c8:	00092640 	call	9264 <__call_exitprocs>
    90cc:	8009883a 	mov	r4,r16
    90d0:	00095380 	call	9538 <_exit>

000090d4 <memcmp>:
    90d4:	218d883a 	add	r6,r4,r6
    90d8:	21800826 	beq	r4,r6,90fc <memcmp+0x28>
    90dc:	20c00003 	ldbu	r3,0(r4)
    90e0:	28800003 	ldbu	r2,0(r5)
    90e4:	18800226 	beq	r3,r2,90f0 <memcmp+0x1c>
    90e8:	1885c83a 	sub	r2,r3,r2
    90ec:	f800283a 	ret
    90f0:	21000044 	addi	r4,r4,1
    90f4:	29400044 	addi	r5,r5,1
    90f8:	003ff706 	br	90d8 <_gp+0xffff788c>
    90fc:	0005883a 	mov	r2,zero
    9100:	f800283a 	ret

00009104 <strlen>:
    9104:	2005883a 	mov	r2,r4
    9108:	10c00007 	ldb	r3,0(r2)
    910c:	18000226 	beq	r3,zero,9118 <strlen+0x14>
    9110:	10800044 	addi	r2,r2,1
    9114:	003ffc06 	br	9108 <_gp+0xffff78bc>
    9118:	1105c83a 	sub	r2,r2,r4
    911c:	f800283a 	ret

00009120 <__register_exitproc>:
    9120:	defff904 	addi	sp,sp,-28
    9124:	00800074 	movhi	r2,1
    9128:	10a61904 	addi	r2,r2,-26524
    912c:	dc400115 	stw	r17,4(sp)
    9130:	14400017 	ldw	r17,0(r2)
    9134:	dc000015 	stw	r16,0(sp)
    9138:	dd400515 	stw	r21,20(sp)
    913c:	8c000c17 	ldw	r16,48(r17)
    9140:	dd000415 	stw	r20,16(sp)
    9144:	dcc00315 	stw	r19,12(sp)
    9148:	dc800215 	stw	r18,8(sp)
    914c:	dfc00615 	stw	ra,24(sp)
    9150:	2025883a 	mov	r18,r4
    9154:	2827883a 	mov	r19,r5
    9158:	302b883a 	mov	r21,r6
    915c:	3829883a 	mov	r20,r7
    9160:	8000021e 	bne	r16,zero,916c <__register_exitproc+0x4c>
    9164:	8c000d04 	addi	r16,r17,52
    9168:	8c000c15 	stw	r16,48(r17)
    916c:	80800117 	ldw	r2,4(r16)
    9170:	00c007c4 	movi	r3,31
    9174:	18800d0e 	bge	r3,r2,91ac <__register_exitproc+0x8c>
    9178:	00800034 	movhi	r2,0
    917c:	10800004 	addi	r2,r2,0
    9180:	1000021e 	bne	r2,zero,918c <__register_exitproc+0x6c>
    9184:	00bfffc4 	movi	r2,-1
    9188:	00002d06 	br	9240 <__register_exitproc+0x120>
    918c:	01002304 	movi	r4,140
    9190:	00000000 	call	0 <__alt_mem_RAM-0x8000>
    9194:	1021883a 	mov	r16,r2
    9198:	103ffa26 	beq	r2,zero,9184 <_gp+0xffff7938>
    919c:	10000115 	stw	zero,4(r2)
    91a0:	88800c17 	ldw	r2,48(r17)
    91a4:	80800015 	stw	r2,0(r16)
    91a8:	8c000c15 	stw	r16,48(r17)
    91ac:	90001b26 	beq	r18,zero,921c <__register_exitproc+0xfc>
    91b0:	80802217 	ldw	r2,136(r16)
    91b4:	1000091e 	bne	r2,zero,91dc <__register_exitproc+0xbc>
    91b8:	00800034 	movhi	r2,0
    91bc:	10800004 	addi	r2,r2,0
    91c0:	103ff026 	beq	r2,zero,9184 <_gp+0xffff7938>
    91c4:	01004204 	movi	r4,264
    91c8:	103ee83a 	callr	r2
    91cc:	103fed26 	beq	r2,zero,9184 <_gp+0xffff7938>
    91d0:	10004015 	stw	zero,256(r2)
    91d4:	10004115 	stw	zero,260(r2)
    91d8:	80802215 	stw	r2,136(r16)
    91dc:	80c00117 	ldw	r3,4(r16)
    91e0:	01400044 	movi	r5,1
    91e4:	18c9883a 	add	r4,r3,r3
    91e8:	2109883a 	add	r4,r4,r4
    91ec:	1109883a 	add	r4,r2,r4
    91f0:	25400015 	stw	r21,0(r4)
    91f4:	28c6983a 	sll	r3,r5,r3
    91f8:	11404017 	ldw	r5,256(r2)
    91fc:	28cab03a 	or	r5,r5,r3
    9200:	11404015 	stw	r5,256(r2)
    9204:	25002015 	stw	r20,128(r4)
    9208:	01000084 	movi	r4,2
    920c:	9100031e 	bne	r18,r4,921c <__register_exitproc+0xfc>
    9210:	11004117 	ldw	r4,260(r2)
    9214:	20c6b03a 	or	r3,r4,r3
    9218:	10c04115 	stw	r3,260(r2)
    921c:	80800117 	ldw	r2,4(r16)
    9220:	10c00044 	addi	r3,r2,1
    9224:	10800084 	addi	r2,r2,2
    9228:	1085883a 	add	r2,r2,r2
    922c:	1085883a 	add	r2,r2,r2
    9230:	80c00115 	stw	r3,4(r16)
    9234:	80a1883a 	add	r16,r16,r2
    9238:	84c00015 	stw	r19,0(r16)
    923c:	0005883a 	mov	r2,zero
    9240:	dfc00617 	ldw	ra,24(sp)
    9244:	dd400517 	ldw	r21,20(sp)
    9248:	dd000417 	ldw	r20,16(sp)
    924c:	dcc00317 	ldw	r19,12(sp)
    9250:	dc800217 	ldw	r18,8(sp)
    9254:	dc400117 	ldw	r17,4(sp)
    9258:	dc000017 	ldw	r16,0(sp)
    925c:	dec00704 	addi	sp,sp,28
    9260:	f800283a 	ret

00009264 <__call_exitprocs>:
    9264:	00800074 	movhi	r2,1
    9268:	10a61904 	addi	r2,r2,-26524
    926c:	10800017 	ldw	r2,0(r2)
    9270:	defff304 	addi	sp,sp,-52
    9274:	ddc00a15 	stw	r23,40(sp)
    9278:	d8800015 	stw	r2,0(sp)
    927c:	10800c04 	addi	r2,r2,48
    9280:	dc800515 	stw	r18,20(sp)
    9284:	dfc00c15 	stw	ra,48(sp)
    9288:	df000b15 	stw	fp,44(sp)
    928c:	dd800915 	stw	r22,36(sp)
    9290:	dd400815 	stw	r21,32(sp)
    9294:	dd000715 	stw	r20,28(sp)
    9298:	dcc00615 	stw	r19,24(sp)
    929c:	dc400415 	stw	r17,16(sp)
    92a0:	dc000315 	stw	r16,12(sp)
    92a4:	d9000115 	stw	r4,4(sp)
    92a8:	2825883a 	mov	r18,r5
    92ac:	d8800215 	stw	r2,8(sp)
    92b0:	05c00034 	movhi	r23,0
    92b4:	bdc00004 	addi	r23,r23,0
    92b8:	d8800017 	ldw	r2,0(sp)
    92bc:	dc000217 	ldw	r16,8(sp)
    92c0:	14c00c17 	ldw	r19,48(r2)
    92c4:	98004126 	beq	r19,zero,93cc <__call_exitprocs+0x168>
    92c8:	9c400117 	ldw	r17,4(r19)
    92cc:	9d002217 	ldw	r20,136(r19)
    92d0:	8d7fffc4 	addi	r21,r17,-1
    92d4:	8c400044 	addi	r17,r17,1
    92d8:	ad4f883a 	add	r7,r21,r21
    92dc:	8c63883a 	add	r17,r17,r17
    92e0:	39cf883a 	add	r7,r7,r7
    92e4:	8c63883a 	add	r17,r17,r17
    92e8:	a1ed883a 	add	r22,r20,r7
    92ec:	9c63883a 	add	r17,r19,r17
    92f0:	a8002616 	blt	r21,zero,938c <__call_exitprocs+0x128>
    92f4:	90000326 	beq	r18,zero,9304 <__call_exitprocs+0xa0>
    92f8:	a0002026 	beq	r20,zero,937c <__call_exitprocs+0x118>
    92fc:	b1002017 	ldw	r4,128(r22)
    9300:	24801e1e 	bne	r4,r18,937c <__call_exitprocs+0x118>
    9304:	99000117 	ldw	r4,4(r19)
    9308:	8a000017 	ldw	r8,0(r17)
    930c:	213fffc4 	addi	r4,r4,-1
    9310:	a900021e 	bne	r21,r4,931c <__call_exitprocs+0xb8>
    9314:	9d400115 	stw	r21,4(r19)
    9318:	00000106 	br	9320 <__call_exitprocs+0xbc>
    931c:	88000015 	stw	zero,0(r17)
    9320:	40001626 	beq	r8,zero,937c <__call_exitprocs+0x118>
    9324:	9f000117 	ldw	fp,4(r19)
    9328:	a0000526 	beq	r20,zero,9340 <__call_exitprocs+0xdc>
    932c:	00800044 	movi	r2,1
    9330:	1548983a 	sll	r4,r2,r21
    9334:	a1404017 	ldw	r5,256(r20)
    9338:	214a703a 	and	r5,r4,r5
    933c:	2800021e 	bne	r5,zero,9348 <__call_exitprocs+0xe4>
    9340:	403ee83a 	callr	r8
    9344:	00000906 	br	936c <__call_exitprocs+0x108>
    9348:	a1404117 	ldw	r5,260(r20)
    934c:	2148703a 	and	r4,r4,r5
    9350:	2000041e 	bne	r4,zero,9364 <__call_exitprocs+0x100>
    9354:	d9000117 	ldw	r4,4(sp)
    9358:	b1400017 	ldw	r5,0(r22)
    935c:	403ee83a 	callr	r8
    9360:	00000206 	br	936c <__call_exitprocs+0x108>
    9364:	b1000017 	ldw	r4,0(r22)
    9368:	403ee83a 	callr	r8
    936c:	99000117 	ldw	r4,4(r19)
    9370:	e13fd11e 	bne	fp,r4,92b8 <_gp+0xffff7a6c>
    9374:	81000017 	ldw	r4,0(r16)
    9378:	24ffcf1e 	bne	r4,r19,92b8 <_gp+0xffff7a6c>
    937c:	ad7fffc4 	addi	r21,r21,-1
    9380:	b5bfff04 	addi	r22,r22,-4
    9384:	8c7fff04 	addi	r17,r17,-4
    9388:	003fd906 	br	92f0 <_gp+0xffff7aa4>
    938c:	b8000f26 	beq	r23,zero,93cc <__call_exitprocs+0x168>
    9390:	99000117 	ldw	r4,4(r19)
    9394:	98c00017 	ldw	r3,0(r19)
    9398:	2000091e 	bne	r4,zero,93c0 <__call_exitprocs+0x15c>
    939c:	18000826 	beq	r3,zero,93c0 <__call_exitprocs+0x15c>
    93a0:	80c00015 	stw	r3,0(r16)
    93a4:	a0000226 	beq	r20,zero,93b0 <__call_exitprocs+0x14c>
    93a8:	a009883a 	mov	r4,r20
    93ac:	00000000 	call	0 <__alt_mem_RAM-0x8000>
    93b0:	9809883a 	mov	r4,r19
    93b4:	00000000 	call	0 <__alt_mem_RAM-0x8000>
    93b8:	84c00017 	ldw	r19,0(r16)
    93bc:	003fc106 	br	92c4 <_gp+0xffff7a78>
    93c0:	9821883a 	mov	r16,r19
    93c4:	1827883a 	mov	r19,r3
    93c8:	003fbe06 	br	92c4 <_gp+0xffff7a78>
    93cc:	dfc00c17 	ldw	ra,48(sp)
    93d0:	df000b17 	ldw	fp,44(sp)
    93d4:	ddc00a17 	ldw	r23,40(sp)
    93d8:	dd800917 	ldw	r22,36(sp)
    93dc:	dd400817 	ldw	r21,32(sp)
    93e0:	dd000717 	ldw	r20,28(sp)
    93e4:	dcc00617 	ldw	r19,24(sp)
    93e8:	dc800517 	ldw	r18,20(sp)
    93ec:	dc400417 	ldw	r17,16(sp)
    93f0:	dc000317 	ldw	r16,12(sp)
    93f4:	dec00d04 	addi	sp,sp,52
    93f8:	f800283a 	ret

000093fc <udivmodsi4>:
    93fc:	2900182e 	bgeu	r5,r4,9460 <udivmodsi4+0x64>
    9400:	28001716 	blt	r5,zero,9460 <udivmodsi4+0x64>
    9404:	00800804 	movi	r2,32
    9408:	00c00044 	movi	r3,1
    940c:	00000206 	br	9418 <udivmodsi4+0x1c>
    9410:	10001126 	beq	r2,zero,9458 <udivmodsi4+0x5c>
    9414:	28000516 	blt	r5,zero,942c <udivmodsi4+0x30>
    9418:	294b883a 	add	r5,r5,r5
    941c:	10bfffc4 	addi	r2,r2,-1
    9420:	18c7883a 	add	r3,r3,r3
    9424:	293ffa36 	bltu	r5,r4,9410 <_gp+0xffff7bc4>
    9428:	18000b26 	beq	r3,zero,9458 <udivmodsi4+0x5c>
    942c:	0005883a 	mov	r2,zero
    9430:	21400236 	bltu	r4,r5,943c <udivmodsi4+0x40>
    9434:	2149c83a 	sub	r4,r4,r5
    9438:	10c4b03a 	or	r2,r2,r3
    943c:	1806d07a 	srli	r3,r3,1
    9440:	280ad07a 	srli	r5,r5,1
    9444:	183ffa1e 	bne	r3,zero,9430 <_gp+0xffff7be4>
    9448:	3000011e 	bne	r6,zero,9450 <udivmodsi4+0x54>
    944c:	f800283a 	ret
    9450:	2005883a 	mov	r2,r4
    9454:	f800283a 	ret
    9458:	0005883a 	mov	r2,zero
    945c:	003ffa06 	br	9448 <_gp+0xffff7bfc>
    9460:	00c00044 	movi	r3,1
    9464:	0005883a 	mov	r2,zero
    9468:	003ff106 	br	9430 <_gp+0xffff7be4>

0000946c <__divsi3>:
    946c:	deffff04 	addi	sp,sp,-4
    9470:	dfc00015 	stw	ra,0(sp)
    9474:	20000916 	blt	r4,zero,949c <__divsi3+0x30>
    9478:	000f883a 	mov	r7,zero
    947c:	28000a16 	blt	r5,zero,94a8 <__divsi3+0x3c>
    9480:	000d883a 	mov	r6,zero
    9484:	00093fc0 	call	93fc <udivmodsi4>
    9488:	38000126 	beq	r7,zero,9490 <__divsi3+0x24>
    948c:	0085c83a 	sub	r2,zero,r2
    9490:	dfc00017 	ldw	ra,0(sp)
    9494:	dec00104 	addi	sp,sp,4
    9498:	f800283a 	ret
    949c:	0109c83a 	sub	r4,zero,r4
    94a0:	01c00044 	movi	r7,1
    94a4:	283ff60e 	bge	r5,zero,9480 <_gp+0xffff7c34>
    94a8:	014bc83a 	sub	r5,zero,r5
    94ac:	39c0005c 	xori	r7,r7,1
    94b0:	003ff306 	br	9480 <_gp+0xffff7c34>

000094b4 <__modsi3>:
    94b4:	20000316 	blt	r4,zero,94c4 <__modsi3+0x10>
    94b8:	28000c16 	blt	r5,zero,94ec <__modsi3+0x38>
    94bc:	01800044 	movi	r6,1
    94c0:	00093fc1 	jmpi	93fc <udivmodsi4>
    94c4:	deffff04 	addi	sp,sp,-4
    94c8:	dfc00015 	stw	ra,0(sp)
    94cc:	0109c83a 	sub	r4,zero,r4
    94d0:	28000916 	blt	r5,zero,94f8 <__modsi3+0x44>
    94d4:	01800044 	movi	r6,1
    94d8:	00093fc0 	call	93fc <udivmodsi4>
    94dc:	0085c83a 	sub	r2,zero,r2
    94e0:	dfc00017 	ldw	ra,0(sp)
    94e4:	dec00104 	addi	sp,sp,4
    94e8:	f800283a 	ret
    94ec:	014bc83a 	sub	r5,zero,r5
    94f0:	01800044 	movi	r6,1
    94f4:	00093fc1 	jmpi	93fc <udivmodsi4>
    94f8:	014bc83a 	sub	r5,zero,r5
    94fc:	003ff506 	br	94d4 <_gp+0xffff7c88>

00009500 <__udivsi3>:
    9500:	000d883a 	mov	r6,zero
    9504:	00093fc1 	jmpi	93fc <udivmodsi4>

00009508 <__umodsi3>:
    9508:	01800044 	movi	r6,1
    950c:	00093fc1 	jmpi	93fc <udivmodsi4>

00009510 <__mulsi3>:
    9510:	0005883a 	mov	r2,zero
    9514:	20000726 	beq	r4,zero,9534 <__mulsi3+0x24>
    9518:	20c0004c 	andi	r3,r4,1
    951c:	2008d07a 	srli	r4,r4,1
    9520:	18000126 	beq	r3,zero,9528 <__mulsi3+0x18>
    9524:	1145883a 	add	r2,r2,r5
    9528:	294b883a 	add	r5,r5,r5
    952c:	203ffa1e 	bne	r4,zero,9518 <_gp+0xffff7ccc>
    9530:	f800283a 	ret
    9534:	f800283a 	ret

00009538 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    9538:	defffd04 	addi	sp,sp,-12
    953c:	df000215 	stw	fp,8(sp)
    9540:	df000204 	addi	fp,sp,8
    9544:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    9548:	0001883a 	nop
    954c:	e0bfff17 	ldw	r2,-4(fp)
    9550:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    9554:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    9558:	10000226 	beq	r2,zero,9564 <_exit+0x2c>
    ALT_SIM_FAIL();
    955c:	002af070 	cmpltui	zero,zero,43969
    9560:	00000106 	br	9568 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    9564:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    9568:	003fff06 	br	9568 <_gp+0xffff7d1c>
